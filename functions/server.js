!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t,n){const i=n(8);n(9);i.init({dsn:"https://410ac85a23c5460f877302107420b85b@o1408070.ingest.sentry.io/4504099776036864",tracesSampleRate:1});const r=i.startTransaction({op:"test",name:"My First Test Transaction"});e.exports={transaction:r,Sentry:i}},function(e,t,n){const i=n(0);n(4).config();const r=process.env.ATLAS_URI;console.log("uri",r),i.connect(r,{useNewUrlParser:!0}),t.connection=i.connection},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("cors")},function(e,t,n){const i=n(1),r=n(5),s=i(),a=n(10).createServer(s),{Server:o}=n(11),c=new o(a,{cors:{origin:"http://localhost:3000",methods:["GET","POST"]}});s.use(r()),a.listen(4e3,()=>{console.log("Server is running on socket: 4000")}),e.exports={io:c}},function(e,t,n){const i=n(0),r=new(0,i.Schema)({firstname:{type:String,required:!0},lastname:{type:String,required:!0},email:{type:String,required:!0,unique:!0,trim:!0,minlength:3},paymentDetails:{type:String},role:{type:String,enum:["user","admin"],required:!0},address:{type:String},city:{type:String},state:{type:String},zipCode:{type:Number},country:{type:String},mobileNumber:{type:Number},isVerified:{type:Boolean,required:!0}},{timestamps:!0}),s=i.models.User||i.model("User",r);e.exports=s},function(e,t){e.exports=require("@sentry/node")},function(e,t){e.exports=require("@sentry/tracing")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("socket.io")},function(e,t,n){const i=n(21),r=n(7),{Sentry:s,transaction:a}=n(2);e.exports=async(e,t,n)=>{if(!e.headers.authorization)return t.status(401).json({message:"Unauthorized Access"});{const o=e.headers.authorization.split(" ")[1];try{const s=await i.auth().verifyIdToken(o);if(s){const t=await r.find({email:s.email});return e.user=t[0],n()}return t.status(401).json({message:"Authorization required"})}catch(e){s.captureException(e),t.status(400).json(e)}finally{a.finish()}}}},function(e,t,n){const i=n(0),r=new(0,i.Schema)({carCompany:{type:String},photos:{type:Array,required:!0},modelName:{type:String},modelYear:{type:String},description:{type:String},color:{type:String},kilometersDriven:{type:Number},condition:{type:String},basePrice:{type:Number},fullPrice:{type:Number},ownerId:{type:i.Schema.Types.ObjectId,refPath:"User",required:!0},currentBid:{type:Number,default:0},numberOfBids:{type:Number,default:0},endTime:{type:Date},bidTimelineId:{type:Number},ownerId:{type:i.Schema.Types.ObjectId,refPath:"User"},status:{type:String,enum:["pending","approved","rejected","sold"],required:!0},lock:{type:Boolean,default:!1}},{timestamps:!0}),s=i.models.Car||i.model("Car",r);e.exports=s},function(e,t,n){const i=n(1),r=n(5),{connection:s}=(n(0),n(3)),{io:a}=n(6),o=n(15);n(4).config();const c=i();process.env.PORT;c.use(r()),c.use(i.json()),s.once("open",()=>{console.log("MongoDB database connection established successfully")}),a.on("connection",e=>{console.log("a user connected")});const d=n(16),u=n(27),l=n(29);c.use("/.netlify/functions/server/cars",d),c.use("/.netlify/functions/server/users",u),c.use("/.netlify/functions/server/cards",l),e.exports=c,e.exports.handler=o(c)},function(e,t){e.exports=require("serverless-http")},function(e,t,n){const i=n(1).Router(),{listCar:r,updateCar:s,deleteCar:a,getById:o,getAllListings:c,verifyCar:d,rejectCar:u,placeBid:l,placeBidCheck:p,getHistory:y,getMyListings:m,getMyBids:f}=n(17);n(13);const b=n(12),h=n(24);i.get("/",c),i.post("/add",b,h.array("image"),r),i.get("/:id",o),i.get("/mylistings/:email",b,m),i.get("/mybids/:email",b,f),i.get("/:id/history",y),i.delete("/:id",a),i.post("/update/:id",b,s),i.post("/verify/:id",b,d),i.post("/reject/:id",b,u),i.post("/placebid",b,l),i.post("/placebidcheck",b,p),e.exports=i},function(e,t,n){const i=n(13),r=n(18),s=n(7),a=n(19),{connection:o}=n(3),{io:c}=n(6),{Sentry:d,transaction:u}=n(2);t.listCar=async(e,t)=>{try{const n=e.files;result=[],n.forEach(async e=>{let t=a.uploader.upload(e.path);result.push(t)}),Promise.all(result).then(n=>{resultantUrls=[],n.forEach(e=>{resultantUrls.push(e.url)});new i({carCompany:e.body.carCompany,photos:resultantUrls,modelName:e.body.modelName,modelYear:Number(e.body.modelYear),color:e.body.color,kilometersDriven:Number(e.body.kilometersDriven),condition:e.body.condition,description:e.body.description,basePrice:Number(e.body.basePrice),fullPrice:Number(e.body.fullPrice),ownerId:e.user._id,currentBid:e.body.currentBid,bidTimelineId:e.body.bidTimelineId,currentBidUserId:e.body.currentBidUserId,status:"pending",endTime:e.body.endTime}).save().then(e=>t.status(200).json({message:"Listing added successfully!!",carDetails:e})).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())})}catch(e){d.captureException(e),t.status(400).json("Error: "+e)}finally{u.finish()}},t.updateCar=async(e,t)=>{i.findById(e.params.id).then(n=>{n.carCompany=e.body.carCompany,n.modelName=e.body.modelName,n.modelYear=Number(e.body.modelYear),n.color=e.body.color,n.kilometersDriven=Number(e.body.kilometersDriven),n.condition=e.body.condition,n.basePrice=Number(e.body.basePrice),n.fullPrice=Number(e.body.fullPrice),n.ownerId=e.body.ownerId,n.currentBid=e.body.currentBid,n.bidTimelineId=e.body.bidTimelineId,n.currentBidUserId=e.body.currentBidUserId,n.status=e.body.status,n.save().then(()=>t.json("Car updated!")).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())}).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.verifyCar=async(e,t)=>{i.findById(e.params.id).then(e=>{e.status="approved",e.save().then(()=>t.json("Car Verified!")).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())}).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.rejectCar=async(e,t)=>{i.findById(e.params.id).then(e=>{e.status="rejected",e.save().then(()=>t.json("Car Rejected!")).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())}).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.deleteCar=async(e,t)=>{i.findByIdAndDelete(e.params.id).then(()=>t.json("Car deleted.")).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.getById=(e,t)=>{i.findById(e.params.id).then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.getMyListings=async(e,t)=>{const n=await s.find({email:e.params.email},{_id:1});i.find({ownerId:n}).then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.getMyBids=async(e,t)=>{let n=await s.find({email:e.params.email},{_id:1});console.log(n),n=n[0]._id;let a=await r.find({timeline:{$elemMatch:{"user._id":n}}},{carId:1,_id:0});if(a){let e=a.map((function(e){return e.carId}));i.find({_id:{$in:e}}).then(e=>{t.json(e)}).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())}else t.json([])},t.getAllListings=async(e,t)=>{i.find().then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())},t.placeBid=async(e,t)=>{const n=e.body.car;try{const a=await s.findById(e.body.car.ownerId),d=Number(e.body.bid);if(e.user.email===a.email)return t.status(200).json({message:"Owner is trying to bid"});if(d<n.basePrice)return t.status(200).json({message:"Bid has to be greater than the base price"});{const s=await i.findById(n._id);if(s.lock)t.status(200).json({message:"Someone else's bid is being processed. Please wait some time and try again"});else{await i.findOneAndUpdate({_id:n._id},{lock:!0});const u=await o.startSession();await u.withTransaction(async()=>{if(!(d>s.currentBid))throw new Error("Bidding amount should be greater than current bid");{const s={_id:n._id},o={$inc:{numberOfBids:1},$set:{currentBid:d}};await i.findOneAndUpdate(s,o,{session:u});const c={user:e.user,bid:d,time:new Date},l=await r.findOne({carId:n._id});if(l){const e=l.timeline;e.push(c),await r.findOneAndUpdate({carId:n._id},{timeline:e},{session:u}),await u.commitTransaction(),t.status(200).json({message:"Bid added successfully!!"})}else{const e=new r({carId:n._id,ownerId:a._id,timeline:[c]});await e.save({session:u}),await i.findOneAndUpdate({_id:n._id},{lock:!1},{session:u}),await u.commitTransaction(),t.status(200).json({message:"Bid added successfully!!",carDetails:e})}}const o=await i.findOneAndUpdate({_id:n._id},{lock:!1},{session:u});c.emit("bid_update",o),u.endSession()})}}}catch(e){await i.findOneAndUpdate({_id:n._id},{lock:!1}),console.log(e),d.captureException(e),t.status(500).json({message:e})}finally{u.finish()}},t.placeBidCheck=async(e,t)=>{try{const n=await s.findById(e.body.car.ownerId),i=await s.find({email:e.user.email},{isVerified:1,_id:0});e.user.email===n.email?t.status(200).json({check:!1,message:"Owner cannot bid on his own car"}):"admin"===e.user.role?t.status(200).json({check:!1,message:"Admin cannot bid"}):t.status(200).json({check:!0,isVerified:i[0].isVerified})}catch(e){console.log(e),d.captureException(e),t.status(500).json({message:e})}finally{u.finish()}},t.getHistory=async(e,t)=>{r.findOne({carId:e.params.id}).then(e=>t.status(200).json({history:e})).catch(e=>{t.status(400).json("Error: "+e),d.captureException(e)}).finally(()=>u.finish())}},function(e,t,n){const i=n(0),r=new(0,i.Schema)({carId:{type:i.Schema.Types.ObjectId,refPath:"Car",required:!0},ownerId:{type:i.Schema.Types.ObjectId,refPath:"User",required:!0},timeline:{type:Array}},{timestamps:!0}),s=i.models.Timeline||i.model("Timeline",r);e.exports=s},function(e,t,n){const i=n(20).v2;i.config({cloud_name:"dugpy2nmx",api_key:"292243955187647",api_secret:"vvn3vMsDLIvo6p53MGVrWIXYl1I"}),e.exports=i},function(e,t){e.exports=require("cloudinary")},function(e,t,n){const i=n(22),r=n(23);0===i.apps.length&&i.initializeApp({credential:i.credential.cert(r)}),e.exports=i},function(e,t){e.exports=require("firebase-admin")},function(e){e.exports=JSON.parse('{"type":"service_account","project_id":"biddingcars-363616","private_key_id":"388559846437fed3fd3708a1eecdcecde61ec8aa","private_key":"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCXhmNAJk+4XNjZ\\nAq1uge8K2FNnk1DRj9M1HDcXRnEEjl/BDRskJchiScH7vVIEgbVHvEeCuPE1SvYp\\n/rcD6SQ/FIrOhUFX9cdhujY40eNKXRg3uD/AYcETC9sDeKbXlfRmHLCXJimYsGqV\\nKq841m7MI3jykpv48AfukXoSwEHPCYDDDPmPdbouiQpaOugsbqb2YSmtQgjXuEP4\\nuGCqqSNnMMwUxmCKML2gs+HiZE2ELw/Pg2TgDeR0ZNCQHfl7cPRBBKkFzi/WpDtH\\ntFb8lEl7TwaYm1o5mbexOSZQUSy2JwSD/S36z0WtPvuMXCEozszxi0x/30o5vrtx\\nF+fzydRDAgMBAAECggEAAwFaLZcKRLypW7XXDRaMUFmVtJEHl33JRsfjpdVdVNBN\\na42gKK7hKGXlxYxDOK3+k54oiES1Gq/9GDx3knRze2wjtqXjnmQptgap9aWKuFpb\\n/8WVP3JmOxj57o8xi/Fq8q2F/nF2KL5IVuNiV00VedIISj4IfumlK/ZRsVaD16CE\\n+Q5pKz9NneDY2TTZPk5LdvmB57zCbBnAz+lXXVPJc4lw7euI5K3LvwKeGpXSd+FM\\nle+Nw+pud5JW1mb+RnsYxoAF2jPeVZmsRN3BwPyQUoN3bKruZhkLcaTVA9PFrlvP\\nfCOP/p4ht6j7F4UEIlbmUr3GZyQ7+4Qprt2fU56fUQKBgQDMRWSbVEB3G17Nifba\\nGol8KMXkI6KjIXqTqsNkcgqyGPlPEcRXEdnzasNsvIiYkMVih1hVdFbVFbinXG5W\\nE1Zvp6hlc7ON0ZkqeoMXcqqdbzl+eNxrnWH34l2zLWGlzB2qyZ92i5Wx05kW3x4y\\nPnD7VTQlthBBLx6AIoMPUj0EEwKBgQC95Ym7KOW4v6IaAkB8qKbQBcZtTkakAggR\\n/cTPUQsi0tElwhZ1OXFC6Z2mtMJB09kwb6D+IM2Z0ukAx6kSOl8BaZMT1P16LTgg\\ne+nMRqh0Q0VvadOqCJ26OTh5/49IhX7+BpNkOJzOauyMT/+aBsDRpgmGhYoDaXXy\\nbjJ3KN0VEQKBgDJ0wZEMko/ZFuW2Ol9NRsCAYcEkfDvHPTvUZkcdVD8BpDM/tDu9\\nkRRrPrJRL3xf5iGcRNl2zyv7HY1Za3efdy5FP3cvyR4ys56mfFMCY9pXauAugmOi\\nkFxmcbaccw49CObyvozNlcBDAAGCQzct7UJnnWXjPsibFvGXlL/oFGI5AoGAa7+M\\ncPf5sOR7VAqnEJSZYjuEpYzepDzK23qEa6XujanVJnmESKt5SqBH5cl21+ceu077\\nqHZwcrGrp9eiZUddlO2UmJIn6WUzDauBs3j8KEvrYBZKFZah+IJzOzX41Qt6TSTq\\nCNnej3k4Ez1pKLpgOhTeHsgy0VDLre09EUPMfiECgYAn9M+bJDtGA3a2XmOqI61f\\ns97C1izhY3Yo5RMe3QmRvV1DsYsaK96gMV7phtm6GzAwv5bt4UzmaTJ/FmtITk0a\\nsrUeYbvlZ5mfyZH5E2CYZIKDj6xIQQEQeu784rXGl8nqbR5qyS8M5jfJIOQTRb5D\\niQ38e8FAwmTRb9ujpXkYzQ==\\n-----END PRIVATE KEY-----\\n","client_email":"firebase-adminsdk-ulaf9@biddingcars-363616.iam.gserviceaccount.com","client_id":"101720513215993324906","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-ulaf9%40biddingcars-363616.iam.gserviceaccount.com"}')},function(e,t,n){const i=n(25),r=n(26);e.exports=i({storage:i.diskStorage({}),fileFilter:(e,t,n)=>{let i=r.extname(t.originalname);".jpg"===i||".jpeg"===i||".png"===i?n(null,!0):n(new Error("File type is not supported"),!1)}})},function(e,t){e.exports=require("multer")},function(e,t){e.exports=require("path")},function(e,t,n){const i=n(1).Router(),{getUsers:r,addUser:s,getUserById:a,getUserByEmail:o,updateUserByEmail:c,verifyUser:d}=n(28);let u=n(12);i.get("/",r),i.get("/:email",u,o),i.get("/:id",u,a),i.post("/add",u,s),i.post("/update",u,c),i.post("/verify/:id",u,d),e.exports=i},function(e,t,n){let i=n(7);const{Sentry:r,transaction:s}=n(2);t.getUsers=(e,t)=>{i.find({isVerified:!1}).then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())},t.getUserById=(e,t)=>{i.findById(e.params.id).then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())},t.getUserByEmail=(e,t)=>{i.findOne({email:e.params.email}).then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())},t.addUser=async(e,t)=>{console.log("add user function",e.body);if(await i.findOne({email:e.body.email}))t.status(400).json("Error: User already Exists");else{new i({firstname:e.body.firstname,lastname:e.body.lastname,email:e.body.email,role:e.body.role,isVerified:!1}).save().then(()=>t.json("User added!")).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())}},t.updateUserByEmail=async(e,t)=>{try{try{console.log("updateUserByEmail",e.headers.user)}catch(e){console.log("user object not "),r.captureException(e)}finally{s.finish()}await i.updateOne({email:e.body.email},{$set:{email:e.body.newemail,firstname:e.body.firstName,lastname:e.body.lastName,address:e.body.address,city:e.body.city,state:e.body.state,zipCode:e.body.zipCode,country:e.body.country,mobileNumber:e.body.mobile}}),t.status(200).json("Message: User Updated")}catch(e){r.captureException(e),t.status(400).json("Error: "+e)}finally{s.finish()}},t.verifyUser=async(e,t)=>{i.findById(e.params.id).then(e=>{e.isVerified=!0,e.save().then(()=>t.json("User Verified!")).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())}).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())}},function(e,t,n){const i=n(1).Router(),{getCarddetails:r,addCarddetails:s}=n(30);let a=n(12);i.get("/",r),i.post("/add",a,s),e.exports=i},function(e,t,n){let i=n(31);n(7);const{Sentry:r,transaction:s}=n(2);t.getCarddetails=(e,t)=>{i.find().then(e=>t.json(e)).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())},t.addCarddetails=async(e,t)=>{new i({customerId:e.user._id,customerName:e.body.name,cardNumber:Number(e.body.cardnumber),expiryDate:e.body.expiry,cardType:e.body.cardtype,cvv:Number(e.body.cvv)}).save().then(()=>t.json("Card details added!")).catch(e=>{t.status(400).json("Error: "+e),r.captureException(e)}).finally(()=>s.finish())}},function(e,t,n){const i=n(0),r=new(0,i.Schema)({customerId:{type:i.Schema.Types.ObjectId,refPath:"User"},customerName:{type:String,required:!0},cardNumber:{type:Number,required:!0},expiryDate:{type:String},cardType:{type:String,enum:["creditCard","debitCard"],required:!0},cvv:{type:Number}},{timestamps:!0}),s=i.models.Carddetails||i.model("Carddetails",r);e.exports=s}]));